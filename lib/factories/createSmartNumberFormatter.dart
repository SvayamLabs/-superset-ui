 import "package:d3-format.dart" show d3Format ; final siFormatter = d3Format ( '''.3~s''' ) ; final float2PointFormatter = d3Format ( '''.2~f''' ) ; final float4PointFormatter = d3Format ( '''.4~f''' ) ; formatValue ( num value ) { if ( identical ( value , 0 ) ) { return "0" ; } final absoluteValue = Math . abs ( value ) ; if ( absoluteValue >= 1000 ) {
 // Normal human being are more familiar

 // with billion (B) that giga (G)
 return siFormatter ( value ) . replace ( "G" , "B" ) ; } if ( absoluteValue >= 1 ) { return float2PointFormatter ( value ) ; } if ( absoluteValue >= 0.001 ) { return float4PointFormatter ( value ) ; } if ( absoluteValue > 0.000001 ) { return '''${ siFormatter ( value * 1000000 )}Âµ''' ; } return siFormatter ( value ) ; } createSmartNumberFormatter ( [ dynamic config = const { } ] ) { final = config ; final getSign = signed ? ( num value ) => ( value > 0 ? "+" : "" ) : ( ) => "" ; return new NumberFormatter ( { "description" : description , "formatFunc" : ( value ) => '''${ getSign ( value )}${ formatValue ( value )}''' , "id" : id || signed ? NumberFormats . SMART_NUMBER_SIGNED : NumberFormats . SMART_NUMBER , "label" : label ?  ? "Adaptive formatter" :  :  } ) ; }